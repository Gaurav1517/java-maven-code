pipeline {
    agent any

    tools {
        maven 'maven' // Ensure 'maven' matches the Maven configuration name in Jenkins
    }
    // DECLARE THE VARIABLES HERE:
    environment {
        DOCKER_USERNAME = "gchauhan1517"     // check the 'ID' in your Jenkins credentials
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs() // Cleans up the workspace before starting
            }
        }

        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gaurav1517/Java-Maven-Sample-code.git' 
            }
        }

        stage('Maven Unit Test') {
            // Test the individual units of code 
            steps {
                dir('app') {
                    sh 'mvn test'
                }
            }
        }
        
        stage('Maven Build') {
            // Build the application into an executable file (.jar)
            steps {
                dir('app') {
                    sh 'mvn clean install'
                }
            }
        }
        
        stage('Maven Integration Test') {
            //  Test the interaction between different units of code
            steps {
                dir('app') {
                    sh 'mvn verify'
                }
            }
        }
        
        stage('Docker Image Build') {
             // Build Docker Image
            steps {
             // go to directory where 'Dockerfile' is stored
                script {
                  def JOB = env.JOB_NAME.toLowerCase()           // Convert Jenkins Job name to lower-case
                  sh "docker build -t ${JOB}:${BUILD_NUMBER} ."  // 'JOB_NAME' & 'BUILD_NUMBER' are Jenkins Global variable
                }
            }
        }
        
        stage('Docker Image Tag') {
            // Rename the Docker Image before pushing to Dockerhub
            steps{
                  script {
                    def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins Job name to lower-case
                    sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
                    sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest"
                  }
            } 
        }
        
        stage('Trivy Image Scan') {
            // Scan Docker images for vulnerabilities 
            steps{
                script { 
                  def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins Job name to lower-case
                  sh "trivy image --format table ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER} -o image-report.html"
                }
            }
        }
        
        stage('Docker Image Push') {
            // Login to Dockerhub & Push the image to Dockerhub
            steps{
                script { 
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) { 
                        sh "docker login -u '${docker_user}' -p '${docker_pass}'" 
                        def JOB = env.JOB_NAME.toLowerCase() 
                        // Convert Jenkins Job name to lower-case 
                        sh "docker push ${docker_user}/${JOB}:v${BUILD_NUMBER}" 
                        sh "docker push ${docker_user}/${JOB}:latest"
                    }
                } 
            }
        }

        stage('Docker Image Cleanup') {
            // Remove the unwanted (dangling) images created in Jenkins Server to free-up space
            steps{
                script { 
                  sh "docker image prune -af"
                }
            }
        }
    }
}
